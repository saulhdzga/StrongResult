name: Build and Publish NuGet Package

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore StrongResult
        run: dotnet restore StrongResult/StrongResult.csproj

      - name: Restore StrongResult.Test
        run: dotnet restore StrongResult.Test/StrongResult.Test.csproj

      - name: Build StrongResult
        run: dotnet build StrongResult/StrongResult.csproj --configuration Release --no-restore

      - name: Build StrongResult.Test
        run: dotnet build StrongResult.Test/StrongResult.Test.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test StrongResult.Test/StrongResult.Test.csproj --configuration Release --no-build --verbosity normal

      - name: Copy README to project folder
        run: cp README.md StrongResult/README.md

      - name: Calculate next version
        id: version
        run: |
          # Get latest tag (default to v0.1.0 if none)
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          # Remove 'v' prefix
          VERSION=${TAG#v}
          # Get last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Parse version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          # Bump version based on commit message
          if [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0
          elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
            MINOR=$((MINOR+1)); PATCH=0
          else
            PATCH=$((PATCH+1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Pack
        run: dotnet pack StrongResult/StrongResult.csproj --configuration Release --no-build --output ./nupkg /p:PackageVersion=${{ steps.version.outputs.version }}

      - name: Publish to NuGet
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
